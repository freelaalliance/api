// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id             String           @id @default(uuid())
  nome           String
  Endereco       Endereco?
  Empresa        Empresa?
  Usuario        Usuario?
  TelefonePessoa TelefonePessoa[]
  EmailPessoa    EmailPessoa[]
  Fornecedor     Fornecedor?
  Cliente        Cliente?
  Colaborador    Colaborador[]

  @@map("pessoas")
}

model Endereco {
  id           String   @id @default(uuid())
  logradouro   String
  bairro       String
  cidade       String
  estado       String
  numero       String
  complemento  String?
  cep          String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  excluido     Boolean  @default(false)
  Pessoa       Pessoa   @relation(fields: [pessoaId], references: [id])
  pessoaId     String   @unique

  @@map("enderecos")
}

model Empresa {
  id                                 String                               @id @default(uuid())
  cnpj                               String                               @unique
  imagemLogo                         String?
  criadoEm                           DateTime                             @default(now())
  atualizadoEm                       DateTime                             @updatedAt
  excluido                           Boolean                              @default(false)
  pessoaId                           String                               @unique
  pessoa                             Pessoa                               @relation(fields: [pessoaId], references: [id])
  Usuario                            Usuario[]
  ModuloEmpresa                      ModuloEmpresa[]
  Instrumento                        Instrumento[]
  Perfil                             Perfil[]
  Equipamento                        Equipamento[]
  Fornecedor                         Fornecedor[]
  ItensAvaliativosRecebimentoEmpresa ItensAvaliativosRecebimentoEmpresa[]
  CategoriasDocumento                CategoriasDocumento[]
  Documentos                         Documentos[]
  Cliente                            Cliente[]
  Venda                              Venda[]
  ProdutoServico                     ProdutoServico[]
  ItensAvaliacaoExpedicao            ItensAvaliacaoExpedicao[]
  Cargo                              Cargo[]
  Treinamento                        Treinamento[]
  ContratacaoColaborador             ContratacaoColaborador[]

  @@map("empresas")
}

model Perfil {
  id                   String                 @id @default(uuid())
  nome                 String
  administrativo       Boolean                @default(false)
  Usuario              Usuario[]
  empresa              Empresa                @relation(fields: [empresaId], references: [id])
  empresaId            String
  PerfilPermissaFuncao PerfilPermissaFuncao[]

  @@map("perfis")
}

model Usuario {
  id                      String                    @id @default(uuid())
  email                   String                    @unique
  senha                   String
  ativo                   Boolean                   @default(true)
  criadoEm                DateTime                  @default(now())
  atualizadoEm            DateTime                  @updatedAt
  pessoa                  Pessoa                    @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pessoaId                String                    @unique
  perfil                  Perfil                    @relation(fields: [perfilId], references: [id])
  perfilId                String
  empresa                 Empresa                   @relation(fields: [empresaId], references: [id])
  empresaId               String
  Calibracao              Calibracao[]
  Manutencao              Manutencao[]
  InspecaoEquipamento     InspecaoEquipamento[]
  AvaliacoesFornecedor    AvaliacoesFornecedor[]
  Compras                 Compras[]
  RecebimentoCompras      RecebimentoCompras[]
  Documentos              Documentos[]
  UsuarioAcessoDocumentos UsuarioAcessoDocumentos[]
  Revisoes                Revisoes[]
  Venda                   Venda[]
  ExpedicaoVenda          ExpedicaoVenda[]
  ContratacaoColaborador  ContratacaoColaborador[]

  @@map("usuarios")
}

model Modulo {
  id            String          @id @default(uuid())
  nome          String
  url           String          @unique
  ModuloEmpresa ModuloEmpresa[]
  Funcao        Funcao[]

  @@map("modulos")
}

model ModuloEmpresa {
  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId String
  modulo    Modulo  @relation(fields: [moduloId], references: [id])
  moduloId  String

  @@id([empresaId, moduloId])
  @@map("modulos_empresa")
}

model Funcao {
  id                   String                 @id @default(uuid())
  nome                 String
  url                  String                 @unique
  modulo               Modulo                 @relation(fields: [moduloId], references: [id])
  moduloId             String
  PerfilPermissaFuncao PerfilPermissaFuncao[]

  @@map("funcoes")
}

model PerfilPermissaFuncao {
  perfil   Perfil @relation(fields: [perfilId], references: [id])
  perfilId String
  funcao   Funcao @relation(fields: [funcaoId], references: [id])
  funcaoId String

  @@id([perfilId, funcaoId])
  @@map("perfil_permissao_funcoes")
}

model Instrumento {
  id          String       @id @default(uuid())
  codigo      String       @unique
  nome        String
  localizacao String
  marca       String
  resolucao   String
  frequencia  Int
  repeticao   Int
  empresaId   String
  empresa     Empresa      @relation(fields: [empresaId], references: [id])
  criadoEm    DateTime     @default(now())
  atualizacao DateTime     @updatedAt
  excluido    Boolean      @default(false)
  Calibracao  Calibracao[]
  Agenda      Agenda[]

  @@map("instrumentos")
}

model Calibracao {
  id                           String           @id @default(uuid())
  numeroCertificado            String           @unique
  erroEncontrado               String
  incertezaTendenciaEncontrado String
  toleranciaEstabelicida       String
  observacao                   String?          @db.LongText
  certificado                  String           @db.LongText
  status                       StatusCalibracao @default(reprovado)
  realizadoEm                  DateTime
  criadoEm                     DateTime         @default(now())
  atualizadoEm                 DateTime         @updatedAt
  excluido                     Boolean          @default(false)
  usuario                      Usuario          @relation(fields: [usuarioId], references: [id])
  usuarioId                    String
  instrumento                  Instrumento      @relation(fields: [instrumentoId], references: [id])
  instrumentoId                String

  @@map("calibracoes")
}

model Agenda {
  id            String      @id @default(uuid())
  agendadoPara  DateTime
  instrumento   Instrumento @relation(fields: [instrumentoId], references: [id])
  instrumentoId String

  @@map("agendas")
}

enum StatusCalibracao {
  aprovado
  reprovado
}

model Equipamento {
  id                        String                      @id @default(uuid())
  codigo                    String                      @db.VarChar(255)
  nome                      String                      @db.VarChar(255)
  especificacao             String?                     @db.LongText
  frequencia                Int                         @default(0)
  empresaId                 String
  empresa                   Empresa                     @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cadastradoEm              DateTime                    @default(now())
  atualizadoEm              DateTime?                   @updatedAt
  inspecionadoEm            DateTime?
  concertadoEm              DateTime?
  tempoOperacao             Int                         @default(0)
  status                    StatusEquipamento           @default(operando)
  PecasEquipamento          PecasEquipamento[]
  AgendaInspecaoEquipamento AgendaInspecaoEquipamento[]
  HistoricoEquipamento      HistoricoEquipamento[]
  Manutencao                Manutencao[]
  InspecaoEquipamento       InspecaoEquipamento[]
  PontosInspecaoEquipamento PontosInspecaoEquipamento[]

  @@map("equipamentos")
}

model PecasEquipamento {
  id                        String                      @id @default(uuid())
  nome                      String                      @db.VarChar(255)
  descricao                 String?                     @db.MediumText
  equipamentoId             String
  equipamento               Equipamento                 @relation(fields: [equipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PontosInspecaoEquipamento PontosInspecaoEquipamento[]

  @@map("pecas_equipamento")
}

model AgendaInspecaoEquipamento {
  id                Int         @id @default(autoincrement())
  agendadoPara      DateTime    @db.Date
  inspecaoRealizada Boolean     @default(false)
  equipamentoId     String
  equipamento       Equipamento @relation(fields: [equipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("agenda_inspecao_equipamentos")
}

model HistoricoEquipamento {
  id            Int         @id @default(autoincrement())
  data          DateTime
  descricao     String      @db.Text
  equipamentoId String
  equipamento   Equipamento @relation(fields: [equipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("historico_equipamento")
}

model Manutencao {
  id                   String      @id @default(uuid())
  criadoEm             DateTime    @default(now())
  iniciadoEm           DateTime?
  finalizadoEm         DateTime?
  canceladoEm          DateTime?
  equipamentoId        String
  equipamento          Equipamento @relation(fields: [equipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuario              Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioId            String
  observacoes          String      @db.LongText
  duracao              Int?
  equipamentoParado    Int?
  tempoMaquinaOperacao Int         @default(0)

  @@map("manutencoes")
}

model InspecaoEquipamento {
  id                        String                      @id @default(uuid())
  iniciadoEm                DateTime                    @default(now())
  finalizadoEm              DateTime?
  statusInspecao            StatusInspecaoEquipamento   @default(reprovado)
  equipamentoId             String
  equipamento               Equipamento                 @relation(fields: [equipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuario                   Usuario                     @relation(fields: [usuarioId], references: [id])
  usuarioId                 String
  PontosInspecaoEquipamento PontosInspecaoEquipamento[]

  @@map("inspecao_equipamentos")
}

model PontosInspecaoEquipamento {
  inspecaoId          String
  inspecaoEquipamento InspecaoEquipamento @relation(fields: [inspecaoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipamentoId       String
  equipamento         Equipamento         @relation(fields: [equipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pecaEquipamentoId   String
  pecasEquipamento    PecasEquipamento    @relation(fields: [pecaEquipamentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  aprovado            Boolean             @default(false)
  inspecionadoEm      DateTime?

  @@id([inspecaoId, equipamentoId, pecaEquipamentoId])
  @@map("pontos_inspecao_equipamento")
}

enum StatusInspecaoEquipamento {
  aprovado
  reprovado
}

enum StatusEquipamento {
  operando
  parado
}

model TelefonePessoa {
  id           String   @id @default(uuid())
  numero       String   @unique @db.VarChar(12)
  cadastradoEm DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  excluido     Boolean  @default(false)
  pessoaId     String
  pessoa       Pessoa   @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("telefones_pessoa")
}

model EmailPessoa {
  id           String   @id @default(uuid())
  email        String   @unique @db.VarChar(255)
  cadastradoEm DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  excluido     Boolean  @default(false)
  pessoaId     String
  pessoa       Pessoa   @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("emails_pessoa")
}

model Fornecedor {
  id                   String                 @id @default(uuid())
  documento            String                 @db.VarChar(14)
  critico              Boolean                @default(false)
  aprovado             Boolean                @default(false)
  desempenho           Decimal
  ultimaAvaliacao      DateTime?
  pessoa               Pessoa                 @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pessoaId             String                 @unique
  empresa              Empresa                @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  empresaId            String
  cadastradoEm         DateTime               @default(now())
  atualizadoEm         DateTime?              @updatedAt
  excluido             Boolean                @default(false)
  DocumentosFornecedor DocumentosFornecedor[]
  AvaliacoesFornecedor AvaliacoesFornecedor[]
  DesempenhoFornecedor DesempenhoFornecedor[]
  Compras              Compras[]

  @@map("fornecedores")
}

model DocumentosFornecedor {
  id           String     @id @default(uuid())
  nome         String     @db.VarChar(255)
  arquivo      String     @db.LongText
  fornecedorId String
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("documentos_fornecedor")
}

model AvaliacoesFornecedor {
  id           String     @id @default(uuid())
  nota         Int
  validade     DateTime   @db.Date
  avaliadoEm   DateTime   @default(now())
  aprovado     Boolean
  fornecedorId String
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioId    String
  usuario      Usuario    @relation(fields: [usuarioId], references: [id])

  @@map("avaliacoes_fornecedor")
}

model DesempenhoFornecedor {
  id           Int        @id @default(autoincrement())
  nota         Decimal
  cadastradoEm DateTime   @default(now())
  fornecedorId String
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("desempenho_fornecedor")
}

model Compras {
  id                    String               @id @default(uuid())
  permiteEntregaParcial Boolean              @default(false)
  prazoEntrega          DateTime             @db.Date()
  condicoesEntrega      String?
  codigo                String               @unique
  numPedido             Int
  recebido              Boolean              @default(false)
  cancelado             Boolean              @default(false)
  excluido              Boolean              @default(false)
  cadastradoEm          DateTime             @default(now())
  atualizadoEm          DateTime             @updatedAt
  fornecedorId          String
  fornecedor            Fornecedor           @relation(fields: [fornecedorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioId             String
  usuario               Usuario              @relation(fields: [usuarioId], references: [id])
  ItensCompra           ItensCompra[]
  RecebimentoCompras    RecebimentoCompras[]

  @@map("compras")
}

model ItensCompra {
  id         Int     @id @default(autoincrement())
  quantidade Int
  descricao  String
  compraId   String
  compra     Compras @relation(fields: [compraId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("itens_compra")
}

model RecebimentoCompras {
  id                   String                 @id @default(uuid())
  recebidoEm           DateTime               @db.Date
  cadastradoEm         DateTime               @default(now())
  avaliacaoEntrega     Decimal
  entregaCompleta      Boolean                @default(false)
  observacoes          String?                @db.LongText
  numeroNota           String?
  numeroCertificado    String?
  compraId             String
  compra               Compras                @relation(fields: [compraId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioId            String
  usuario              Usuario                @relation(fields: [usuarioId], references: [id])
  AvaliacaoRecebimento AvaliacaoRecebimento[]

  @@map("recebimento_compras")
}

model ItensAvaliativosRecebimentoEmpresa {
  id                   String                 @id @default(uuid())
  descricao            String                 @db.MediumText()
  ativo                Boolean                @default(true)
  empresa              Empresa                @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  empresaId            String
  AvaliacaoRecebimento AvaliacaoRecebimento[]

  @@map("itens_avaliativos_recebimento_empresa")
}

model AvaliacaoRecebimento {
  id                 String                             @id @default(uuid())
  notaAvaliacao      Decimal
  itemAvaliacaoId    String
  itemAvaliativo     ItensAvaliativosRecebimentoEmpresa @relation(fields: [itemAvaliacaoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recebimentoId      String
  recebimentoCompras RecebimentoCompras                 @relation(fields: [recebimentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("avaliacao_recebimento")
}

model CategoriasDocumento {
  id         String       @id @default(uuid())
  nome       String
  empresa    Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  empresaId  String
  Documentos Documentos[]

  @@map("categorias_documento")
}

model Documentos {
  id                      String                    @id @default(uuid())
  nome                    String
  descricao               String
  copias                  Int                       @default(0)
  recuperacao             String
  presElegibilidade       String
  disposicao              String
  retencao                DateTime                  @db.Date
  uso                     String
  cadastradoEm            DateTime                  @default(now())
  categoriaDocumentoId    String
  categoriasDocumento     CategoriasDocumento       @relation(fields: [categoriaDocumentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioId               String
  usuario                 Usuario                   @relation(fields: [usuarioId], references: [id])
  UsuarioAcessoDocumentos UsuarioAcessoDocumentos[]
  Revisoes                Revisoes[]
  empresaId               String
  empresa                 Empresa                   @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("documentos")
}

model UsuarioAcessoDocumentos {
  usuarioId   String
  usuario     Usuario    @relation(fields: [usuarioId], references: [id])
  documentoId String
  documentos  Documentos @relation(fields: [documentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([usuarioId, documentoId])
  @@map("usuario_acesso_documentos")
}

model Arquivos {
  id           String     @id @default(uuid())
  nome         String
  url          String     @db.Text
  cadastradoEm DateTime   @default(now())
  Revisoes     Revisoes[]

  @@map("arquivos")
}

model Revisoes {
  id            String     @id @default(uuid())
  numeroRevisao Int
  revisadoEm    DateTime   @default(now())
  usuarioId     String
  usuario       Usuario    @relation(fields: [usuarioId], references: [id])
  documentoId   String
  documentos    Documentos @relation(fields: [documentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  arquivoId     String
  arquivos      Arquivos   @relation(fields: [arquivoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("revisoes")
}

model Cliente {
  id           String    @id @default(uuid()) @db.Char(36)
  documento    String    @db.VarChar(14)
  pessoaId     String    @unique @db.Char(36)
  empresaId    String    @db.Char(36)
  cadastradoEm DateTime  @default(now())
  atualizadoEm DateTime? @updatedAt
  excluido     Boolean   @default(false)
  observacoes  String?   @db.Text

  pessoa  Pessoa  @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendas  Venda[]

  @@map("clientes")
}

model Venda {
  id                    String    @id @default(uuid()) @db.Char(36)
  condicoes             String?   @db.Text
  permiteEntregaParcial Boolean   @default(false)
  prazoEntrega          DateTime
  numPedido             Int
  codigo                String    @db.VarChar(45)
  expedido              Boolean   @default(false)
  cancelado             Boolean?  @default(false)
  cadastradoEm          DateTime  @default(now())
  atualizadoEm          DateTime? @updatedAt

  clientesId String @db.Char(36)
  empresasId String @db.Char(36)
  usuariosId String @db.Char(36)

  cliente    Cliente          @relation(fields: [clientesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  empresa    Empresa          @relation(fields: [empresasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuario    Usuario          @relation(fields: [usuariosId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itensVenda ItensVenda[]
  expedicoes ExpedicaoVenda[]

  @@map("vendas")
}

model ProdutoServico {
  id        String             @id @default(uuid()) @db.Char(36)
  nome      String
  descricao String             @db.Text
  tipo      TipoProdutoServico @default(PRODUTO)
  preco     Decimal            @db.Decimal(22, 2)
  ativo     Boolean            @default(true)
  empresaId String
  empresa   Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  itensVenda ItensVenda[]

  @@map("produtos_servicos")
}

model ItensVenda {
  vendasId           String @db.Char(36)
  produtosServicosId String @db.Char(36)
  quantidade         Int    @default(1)

  venda          Venda          @relation(fields: [vendasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produtoServico ProdutoServico @relation(fields: [produtosServicosId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([vendasId, produtosServicosId])
  @@index([vendasId])
  @@index([produtosServicosId])
  @@map("itens_venda")
}

model ExpedicaoVenda {
  id                 String   @id @default(uuid()) @db.Char(36)
  cadastradoEm       DateTime @default(now())
  recebidoEm         DateTime
  avaliacaoExpedicao Decimal  @default(0)
  vendasId           String   @db.Char(36)
  usuariosId         String   @db.Char(36)

  usuario    Usuario              @relation(fields: [usuariosId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venda      Venda                @relation(fields: [vendasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  avaliacoes AvaliacaoExpedicao[]

  @@index([vendasId])
  @@map("expedicoes_venda")
}

model ItensAvaliacaoExpedicao {
  id         Int     @id @default(autoincrement())
  pergunta   String
  empresasId String  @db.Char(36)
  excluido   Boolean @default(false)

  empresa    Empresa              @relation(fields: [empresasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  avaliacoes AvaliacaoExpedicao[]

  @@map("itens_avaliacao_expedicao")
}

model AvaliacaoExpedicao {
  id                        Int    @id @default(autoincrement())
  nota                      Int
  itensAvaliacaoExpedicaoId Int
  expedicaoId               String @db.Char(36)

  item      ItensAvaliacaoExpedicao @relation(fields: [itensAvaliacaoExpedicaoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expedicao ExpedicaoVenda          @relation(fields: [expedicaoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([itensAvaliacaoExpedicaoId, expedicaoId])
  @@map("avaliacao_expedicao")
}

enum TipoProdutoServico {
  SERVICO
  PRODUTO
}

model Cargo {
  id                           String                         @id @default(uuid()) @db.Char(36)
  nome                         String                         @db.VarChar(255)
  atribuicoes                  String                         @db.Text
  superior                     Boolean                        @default(false)
  experienciaMinima            String                         @db.Text
  escolaridadeMinima           String                         @db.Text
  excluido                     Boolean                        @default(false)
  empresasId                   String                         @db.Char(36)
  empresa                      Empresa                        @relation(fields: [empresasId], references: [id])
  contratacoes                 ContratacaoColaborador[]
  treinamentosIntegracaoCargos TreinamentosIntegracaoCargos[]

  @@map("cargos")
}

model Treinamento {
  id                           String                         @id @default(uuid()) @db.Char(36)
  nome                         String                         @db.VarChar(255)
  tipo                         TipoTreinamento                @default(integracao)
  excluido                     Boolean                        @default(false)
  empresasId                   String                         @db.Char(36)
  empresa                      Empresa                        @relation(fields: [empresasId], references: [id])
  planos                       PlanoTreinamento[]
  realizados                   TreinamentoRealizado[]
  treinamentosIntegracaoCargos TreinamentosIntegracaoCargos[]

  @@map("treinamentos")
}

enum TipoTreinamento {
  integracao
  capacitacao
}

model PlanoTreinamento {
  id             Int         @id @default(autoincrement())
  nome           String      @db.VarChar(255)
  excluido       Boolean     @default(false)
  treinamentosId String      @db.Char(36)
  treinamento    Treinamento @relation(fields: [treinamentosId], references: [id])

  @@map("planos_treinamento")
}

model Colaborador {
  id           String                   @default(uuid()) @db.Char(36)
  documento    String                   @db.VarChar(11)
  pessoasId    String                   @db.Char(36)
  pessoa       Pessoa                   @relation(fields: [pessoasId], references: [id])
  contratacoes ContratacaoColaborador[]

  @@id([id, pessoasId])
  @@unique([id])
  @@unique([documento])
  @@map("colaboradores")
}

model ContratacaoColaborador {
  id                              String                            @default(uuid())
  admitidoEm                      DateTime                          @db.Date
  demitidoEm                      DateTime?                         @db.Date
  empresaId                       String                            @db.Char(36)
  cargoId                         String                            @db.Char(36)
  colaboradoresId                 String                            @db.Char(36)
  usuariosId                      String                            @db.Char(36)
  usuario                         Usuario                           @relation(fields: [usuariosId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  empresa                         Empresa                           @relation(fields: [empresaId], references: [id])
  cargo                           Cargo                             @relation(fields: [cargoId], references: [id])
  colaborador                     Colaborador                       @relation(fields: [colaboradoresId], references: [id])
  treinamentosRealizados          TreinamentoRealizado[]
  documentosContrato              DocumentosContrato[]
  HistoricoContratacaoColaborador HistoricoContratacaoColaborador[]

  @@id([id, cargoId, colaboradoresId])
  @@unique([id])
  @@map("contratacao_colaborador")
}

model TreinamentoRealizado {
  id                       String                 @default(uuid())
  iniciadoEm               DateTime               @default(now())
  finalizadoEm             DateTime?
  certificado              String?                @db.VarChar(255)
  treinamentosId           String                 @db.Char(36)
  contratacaoColaboradorId String                 @db.Char(36)
  treinamento              Treinamento            @relation(fields: [treinamentosId], references: [id])
  contratacaoColaborador   ContratacaoColaborador @relation(fields: [contratacaoColaboradorId], references: [id])

  @@id([id, contratacaoColaboradorId])
  @@unique([id])
  @@map("treinamentos_realizados")
}

model TreinamentosIntegracaoCargos {
  treinamentosId String      @db.Char(36)
  cargosId       String      @db.Char(36)
  treinamento    Treinamento @relation(fields: [treinamentosId], references: [id])
  cargo          Cargo       @relation(fields: [cargosId], references: [id])

  @@id([treinamentosId, cargosId])
  @@map("treinamentos_integracao_cargos")
}

model DocumentosContrato {
  id                       Int                    @id @default(autoincrement())
  chaveArquivo             String                 @unique @db.VarChar(255)
  documento                String                 @db.VarChar(255)
  contratacaoColaboradorId String                 @db.Char(36)
  contratacaoColaborador   ContratacaoColaborador @relation(fields: [contratacaoColaboradorId], references: [id])

  @@map("documentos_contrato")
}

model HistoricoContratacaoColaborador {
  id                       Int                    @id @default(autoincrement())
  data                     DateTime               @default(now())
  descricao                String                 @db.Text
  contratacaoColaborador   ContratacaoColaborador @relation(fields: [contratacaoColaboradorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contratacaoColaboradorId String                 @db.Char(36)

  @@map("historico_contratacao_colaborador")
}
